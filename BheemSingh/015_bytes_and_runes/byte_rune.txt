byte and rune :

Golang has integer types called byte and rune that are aliases for uint8 and int32 data types, respectively.

In Go, the byte and rune data types are used to distinguish characters from integer values.

In Go, there is no char data type. It uses byte and rune to represent character values.

The byte data type represents ASCII characters while the rune data type represents a more broader set of 
Unicode characters that are encoded in UTF-8 format.

In Go, Characters are expressed by enclosing them in single quotes like this: 'a'.

We can create a byte variable by explicitly specifying the type:

var anotherLetter byte = 'B'

Both byte and rune data types are essentially integers.

For example, a byte variable with value 'a' is converted to the integer 97 while a rune variable 
with a unicode value '~' is converted to the corresponding unicode codepoint U+007E,
 where U+ means unicode and the numbers are hexadecimal, which is essentially an integer.